input {
  udp {
    type => "log4net"
    port => 8085
  }
}

filter {
  if [type] == "log4net" {
    grok {
      match => { "message" => "(?m)%{NUMBER:threadid} %{TIMESTAMP_ISO8601:sourceTimestamp} %{NOTSPACE:hostname} %{NOTSPACE:log_owner} (?<sitename>\b[\w+|.]+\b) %{NOTSPACE:indexname} %{LOGLEVEL:logLevel} %{GREEDYDATA:}(?<service_path>(?<=Webservice call, Service......:).[^\n]+)%{GREEDYDATA}(?<service_endpoint>(?<=Webservice call, Function.....:).[^\n]+)%{GREEDYDATA}(?<service_responsetime>(?<=Webservice call, Time.........:).[^ms]+)"}
      match => { "message" => "(?m)%{NUMBER:threadid} %{TIMESTAMP_ISO8601:sourceTimestamp} %{NOTSPACE:hostname} %{NOTSPACE:log_owner} (?<sitename>\b[\w+|.]+\b) %{NOTSPACE:indexname} %{LOGLEVEL:logLevel} %{GREEDYDATA:[@metadata][tmpMessage]}"}
    }

    if [log_owner] == "PT.Framework.Logging.Infrastructure.LogWebServiceCall" {
      mutate {
        convert => {"service_responsetime" => "integer"}
        add_field => {"service_url" => "%{service_path}/%{service_endpoint}"}
        gsub => [
          "message", "^.+Webservice call >>>>>>>>>>>>>>", "Webservice call >>>>>>>>>>>>>>"
        ]
      }
    } else {
      mutate {
        
        update => ["message", "%{[@metadata][tmpMessage]}"]
      }
    }
    mutate {
      lowercase => [ "sitename" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["localhost"]
    manage_template => false
    index => "%{indexname}"
  } 
}